#!/usr/bin/env bash
# Neovim Configuration Switcher
# Allows switching between different nvim configurations stored in dotfiles

set -e

DOTFILES_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
NVIM_CONFIG_DIR="$HOME/.config/nvim"
NVIM_DATA_DIR="$HOME/.local/share/nvim"
NVIM_CACHE_DIR="$HOME/.cache/nvim"

# Available configurations (name:path format)
CONFIGS=(
    "astronvim:$DOTFILES_DIR/stow/nvim/.config/nvim"
    "vanilla:$DOTFILES_DIR/configs/nvim-vanilla"
    "lazyvim:$DOTFILES_DIR/configs/nvim-lazyvim"
)

get_config_path() {
    local config_name="$1"
    for config in "${CONFIGS[@]}"; do
        local name="${config%:*}"
        local path="${config#*:}"
        if [[ "$name" == "$config_name" ]]; then
            echo "$path"
            return 0
        fi
    done
    return 1
}

list_configs() {
    for config in "${CONFIGS[@]}"; do
        echo "${config%:*}"
    done
}

show_help() {
    echo "Neovim Configuration Switcher"
    echo "Usage: $0 [COMMAND] [CONFIG]"
    echo ""
    echo "Commands:"
    echo "  switch <config>   Switch to specified configuration"
    echo "  current          Show current configuration"
    echo "  list             List available configurations"
    echo "  backup           Backup current nvim data/cache"
    echo "  restore          Show restore instructions"
    echo "  clean            Clean nvim data/cache (useful when switching)"
    echo ""
    echo "Available configurations:"
    for config in "${CONFIGS[@]}"; do
        echo "  - ${config%:*}"
    done
}

get_current_config() {
    if [[ -L "$NVIM_CONFIG_DIR" ]]; then
        local target=$(readlink "$NVIM_CONFIG_DIR")
        # Convert relative path to absolute
        if [[ ! "$target" =~ ^/ ]]; then
            target="$(cd "$(dirname "$NVIM_CONFIG_DIR")" && pwd)/$target"
        fi

        for config in "${CONFIGS[@]}"; do
            local name="${config%:*}"
            local path="${config#*:}"
            if [[ "$path" == "$target" ]]; then
                echo "$name"
                return
            fi
        done
        echo "unknown ($(basename "$target"))"
    else
        echo "standalone"
    fi
}

backup_nvim_data() {
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local backup_dir="$DOTFILES_DIR/nvim-backups/$timestamp"

    echo "Creating backup at $backup_dir"
    mkdir -p "$backup_dir"

    [[ -d "$NVIM_DATA_DIR" ]] && cp -r "$NVIM_DATA_DIR" "$backup_dir/share"
    [[ -d "$NVIM_CACHE_DIR" ]] && cp -r "$NVIM_CACHE_DIR" "$backup_dir/cache"

    echo "Backup created successfully"
}

clean_nvim_data() {
    echo "Cleaning nvim data and cache..."
    [[ -d "$NVIM_DATA_DIR" ]] && rm -rf "$NVIM_DATA_DIR"
    [[ -d "$NVIM_CACHE_DIR" ]] && rm -rf "$NVIM_CACHE_DIR"
    echo "Clean complete"
}

switch_config() {
    local config="$1"
    local config_path

    config_path=$(get_config_path "$config")
    if [[ $? -ne 0 ]]; then
        echo "Error: Configuration '$config' not found"
        echo "Available configurations:"
        list_configs
        exit 1
    fi

    if [[ ! -d "$config_path" ]]; then
        echo "Error: Configuration directory '$config_path' does not exist"
        exit 1
    fi

    local current=$(get_current_config)
    echo "Current configuration: $current"
    echo "Switching to: $config"

    # Remove existing symlink or directory
    if [[ -L "$NVIM_CONFIG_DIR" ]] || [[ -d "$NVIM_CONFIG_DIR" ]]; then
        rm -rf "$NVIM_CONFIG_DIR"
    fi

    # Create new symlink
    ln -sf "$config_path" "$NVIM_CONFIG_DIR"

    echo "âœ“ Switched to $config configuration"
    echo "Configuration path: $config_path"
    echo ""
    echo "Note: You may want to run '$0 clean' to clear old data/cache"
    echo "      or '$0 backup' before cleaning to save current state"
}

case "${1:-help}" in
    "switch")
        if [[ -z "$2" ]]; then
            echo "Error: Please specify a configuration to switch to"
            echo "Available:"
            list_configs
            exit 1
        fi
        switch_config "$2"
        ;;
    "current")
        echo "Current configuration: $(get_current_config)"
        ;;
    "list")
        echo "Available configurations:"
        current_config=$(get_current_config)
        for config in "${CONFIGS[@]}"; do
            name="${config%:*}"
            current_marker=""
            [[ "$current_config" == "$name" ]] && current_marker=" (current)"
            echo "  - $name$current_marker"
        done
        ;;
    "backup")
        backup_nvim_data
        ;;
    "restore")
        echo "Available backups:"
        if [[ -d "$DOTFILES_DIR/nvim-backups" ]]; then
            ls -1 "$DOTFILES_DIR/nvim-backups"
            echo ""
            echo "To restore a backup, manually copy from:"
            echo "$DOTFILES_DIR/nvim-backups/[timestamp]/"
        else
            echo "No backups found"
        fi
        ;;
    "clean")
        read -p "This will delete all nvim data and cache. Continue? (y/N) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            clean_nvim_data
        else
            echo "Cancelled"
        fi
        ;;
    "help"|*)
        show_help
        ;;
esac
