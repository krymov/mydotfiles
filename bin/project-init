#!/usr/bin/env bash
# Project initialization with flake templates
# Creates new projects with proper Nix flakes and direnv integration

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

show_help() {
    echo "🚀 Project Initializer"
    echo ""
    echo "Usage: project-init [TYPE] [NAME]"
    echo ""
    echo "Types:"
    echo "  python    - Python project with virtual env"
    echo "  go        - Go project with modules"
    echo "  nodejs    - Node.js project with npm/yarn"
    echo "  rust      - Rust project with cargo"
    echo "  fullstack - Full-stack project (Go + React)"
    echo "  data      - Data analysis project"
    echo ""
    echo "Examples:"
    echo "  project-init python my-ml-app"
    echo "  project-init go my-api-server"
    echo "  project-init nodejs my-web-app"
    echo ""
}

init_project() {
    local project_type="$1"
    local project_name="$2"
    local dotfiles_dir="$HOME/.dotfiles"
    
    echo -e "${BLUE}🚀 Initializing $project_type project: $project_name${NC}"
    
    # Create project directory
    mkdir -p "$project_name"
    cd "$project_name"
    
    # Initialize git
    git init
    
    # Copy flake template or create basic one
    if [[ -f "$dotfiles_dir/flakes/$project_type/flake.nix" ]]; then
        cp "$dotfiles_dir/flakes/$project_type/flake.nix" .
        [[ -f "$dotfiles_dir/flakes/$project_type/.envrc" ]] && cp "$dotfiles_dir/flakes/$project_type/.envrc" .
        
        # Customize flake description
        sed -i.bak "s/description = \".*\"/description = \"$project_name\"/" flake.nix
        rm -f flake.nix.bak
    else
        _create_flake_template "$project_type" "$project_name"
        _create_envrc_template "$project_type"
    fi
    
    # Create basic .gitignore
    _create_gitignore "$project_type"
    
    # Add language-specific files
    case "$project_type" in
        python)
            _setup_python_project "$project_name"
            ;;
        go)
            _setup_go_project "$project_name"
            ;;
        nodejs)
            _setup_nodejs_project "$project_name"
            ;;
        rust)
            _setup_rust_project "$project_name"
            ;;
        data)
            _setup_data_project "$project_name"
            ;;
        fullstack)
            _setup_fullstack_project "$project_name"
            ;;
    esac
    
    # Enable direnv
    direnv allow
    
    echo -e "${GREEN}✅ Project $project_name initialized successfully!${NC}"
    echo ""
    echo "📁 Project structure created"
    echo "🔧 Development environment configured"
    echo "📝 Git repository initialized"
    echo ""
    echo "Next steps:"
    echo "  cd $project_name"
    echo "  \$EDITOR ."
    echo ""
    echo "The development environment will automatically load when you enter the directory."
}

_create_flake_template() {
    local project_type="$1"
    local project_name="$2"
    
    case "$project_type" in
        python)
            cat > flake.nix << EOF
{
  description = "$project_name";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    flake-utils.url = "github:numtide/flake-utils";
  };

  # Cachix configuration for faster builds
  nixConfig = {
    extra-substituters = [
      "https://nix-community.cachix.org"
    ];
    extra-trusted-public-keys = [
      "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
    ];
  };

  outputs = { self, nixpkgs, flake-utils }:
    flake-utils.lib.eachDefaultSystem (system:
      let
        pkgs = nixpkgs.legacyPackages.\${system};
      in
      {
        devShells = {
          # Default minimal environment with uv and ruff
          default = pkgs.mkShell {
            buildInputs = with pkgs; [
              # Modern Python tooling
              python311
              uv              # Fast Python package manager
              ruff            # Fast Python linter and formatter
              
              # Development utilities
              git
              curl
              jq
              cachix
            ];

            shellHook = ''
              echo "🐍 Welcome to $project_name! (minimal)"
              echo "Python version: \$(python --version)"
              echo "uv version: \$(uv --version)"
              echo "ruff version: \$(ruff --version)"
              echo ""
              echo "🚀 Quick start:"
              echo "  uv init                    # Initialize project"
              echo "  uv add requests            # Add dependency"
              echo "  uv run python src/main.py  # Run with dependencies"
              echo "  ruff check . && ruff format .  # Lint and format"
              echo ""
              echo "💡 For full environment: nix develop .#full"
              
              export PROJECT_ROOT=\$(pwd)
              export UV_CACHE_DIR="\$PWD/.uv-cache"
              mkdir -p .uv-cache
            '';
          };
          
          # Full environment with additional tools  
          full = pkgs.mkShell {
            buildInputs = with pkgs; [
              # Modern Python tooling
              python311
              uv
              ruff
              
              # Additional development tools
              python311Packages.python-lsp-server
              python311Packages.mypy
              python311Packages.pytest
              python311Packages.ipython
              
              # Popular libraries
              python311Packages.requests
              python311Packages.click
              python311Packages.rich
              python311Packages.typer
              
              # Development utilities
              git
              curl
              jq
              cachix
              sqlite
              tree
              fd
              ripgrep
              bat
            ];

            shellHook = ''
              echo "🐍 Welcome to $project_name! (full)"
              echo "Python version: \$(python --version)"
              echo "uv version: \$(uv --version)"
              echo "ruff version: \$(ruff --version)"
              echo ""
              echo "🚀 Available tools:"
              echo "  uv, ruff, mypy, pytest, ipython"
              echo "  requests, click, rich, typer (pre-installed)"
              echo ""
              echo "🏁 Quick start:"
              echo "  uv init                    # Initialize project"
              echo "  uv add fastapi uvicorn     # Add web framework"
              echo "  uv run python src/main.py  # Run with dependencies"
              echo "  ruff check . && ruff format .  # Lint and format"
              echo "  mypy . && pytest          # Type check and test"
              echo ""
              
              export PROJECT_ROOT=\$(pwd)
              export UV_CACHE_DIR="\$PWD/.uv-cache"
              mkdir -p .uv-cache
            '';
          };
        };
      });
}
EOF
            ;;
        go)
            cat > flake.nix << EOF
{
  description = "$project_name";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    flake-utils.url = "github:numtide/flake-utils";
  };

  outputs = { self, nixpkgs, flake-utils }:
    flake-utils.lib.eachDefaultSystem (system:
      let
        pkgs = nixpkgs.legacyPackages.\${system};
      in
      {
        devShells.default = pkgs.mkShell {
          buildInputs = with pkgs; [
            # Go
            go
            gotools
            golangci-lint
            air # Live reload
            
            # Development tools
            git
            curl
            jq
            cachix
          ];

          shellHook = ''
            echo "🐹 Welcome to $project_name!"
            echo ""
            echo "📦 Environment loaded with:"
            echo "  Go \$(go version)"
            echo ""
            echo "🏁 Quick start:"
            echo "  go mod tidy"
            echo "  go run cmd/main.go"
            echo "  air  # for live reload"
            echo ""
            
            export PROJECT_ROOT=\$(pwd)
            export GOPATH="\$PROJECT_ROOT/.go"
            export PATH="\$GOPATH/bin:\$PATH"
          '';
        };
      });
}
EOF
            ;;
        nodejs)
            cat > flake.nix << EOF
{
  description = "$project_name";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    flake-utils.url = "github:numtide/flake-utils";
  };

  outputs = { self, nixpkgs, flake-utils }:
    flake-utils.lib.eachDefaultSystem (system:
      let
        pkgs = nixpkgs.legacyPackages.\${system};
      in
      {
        devShells.default = pkgs.mkShell {
          buildInputs = with pkgs; [
            # Node.js
            nodejs_20
            nodePackages.npm
            nodePackages.yarn
            nodePackages.pnpm
            
            # Development tools
            git
            curl
            jq
            cachix
          ];

          shellHook = ''
            echo "🟢 Welcome to $project_name!"
            echo ""
            echo "📦 Environment loaded with:"
            echo "  Node.js \$(node --version)"
            echo "  npm \$(npm --version)"
            echo "  yarn \$(yarn --version)"
            echo ""
            echo "🏁 Quick start:"
            echo "  npm install"
            echo "  npm run dev"
            echo ""
            
            export PROJECT_ROOT=\$(pwd)
          '';
        };
      });
}
EOF
            ;;
        rust)
            cat > flake.nix << EOF
{
  description = "$project_name";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    flake-utils.url = "github:numtide/flake-utils";
  };

  outputs = { self, nixpkgs, flake-utils }:
    flake-utils.lib.eachDefaultSystem (system:
      let
        pkgs = nixpkgs.legacyPackages.\${system};
      in
      {
        devShells.default = pkgs.mkShell {
          buildInputs = with pkgs; [
            # Rust
            rustc
            cargo
            rustfmt
            clippy
            cargo-watch
            
            # Development tools
            git
            curl
            jq
            cachix
          ];

          shellHook = ''
            echo "🦀 Welcome to $project_name!"
            echo ""
            echo "📦 Environment loaded with:"
            echo "  Rust \$(rustc --version)"
            echo "  Cargo \$(cargo --version)"
            echo ""
            echo "🏁 Quick start:"
            echo "  cargo build"
            echo "  cargo run"
            echo "  cargo watch -x run  # for live reload"
            echo ""
            
            export PROJECT_ROOT=\$(pwd)
          '';
        };
      });
}
EOF
            ;;
        data)
            cat > flake.nix << EOF
{
  description = "$project_name - Data Analysis Project";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    flake-utils.url = "github:numtide/flake-utils";
  };

  outputs = { self, nixpkgs, flake-utils }:
    flake-utils.lib.eachDefaultSystem (system:
      let
        pkgs = nixpkgs.legacyPackages.\${system};
      in
      {
        devShells.default = pkgs.mkShell {
          buildInputs = with pkgs; [
            # Python for data analysis
            python311
            python311Packages.pip
            python311Packages.jupyter
            python311Packages.pandas
            python311Packages.numpy
            python311Packages.matplotlib
            python311Packages.seaborn
            python311Packages.scikit-learn
            
            # Data tools
            duckdb
            sqlite
            qsv
            visidata
            miller
            jq
            
            # Development tools
            git
            curl
            cachix
          ];

          shellHook = ''
            echo "📊 Welcome to $project_name!"
            echo ""
            echo "📦 Data Analysis Environment loaded with:"
            echo "  Python \$(python --version)"
            echo "  Jupyter, pandas, numpy, matplotlib, seaborn, scikit-learn"
            echo "  DuckDB, SQLite, qsv, visidata, miller"
            echo ""
            echo "🏁 Quick start:"
            echo "  jupyter lab"
            echo "  python notebooks/explore.py"
            echo "  vd data/sample.csv  # Open with visidata"
            echo ""
            
            export PROJECT_ROOT=\$(pwd)
            
            # Create virtual environment
            if [[ ! -d .venv ]]; then
              echo "📦 Creating Python virtual environment..."
              python -m venv .venv
            fi
            
            source .venv/bin/activate
          '';
        };
      });
}
EOF
            ;;
        *)
            # Generic template
            cat > flake.nix << EOF
{
  description = "$project_name";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    flake-utils.url = "github:numtide/flake-utils";
  };

  outputs = { self, nixpkgs, flake-utils }:
    flake-utils.lib.eachDefaultSystem (system:
      let
        pkgs = nixpkgs.legacyPackages.\${system};
      in
      {
        devShells.default = pkgs.mkShell {
          buildInputs = with pkgs; [
            git
            curl
            jq
            cachix
          ];

          shellHook = ''
            echo "🚀 Welcome to $project_name!"
          '';
        };
      });
}
EOF
            ;;
    esac
}

_create_envrc_template() {
    local project_type="$1"
    
    cat > .envrc << 'EOF'
# Load the nix development environment
use flake

# Load .env file if it exists (for secrets)
dotenv_if_exists

# Project-specific PATH additions
PATH_add bin
PATH_add scripts
EOF

    case "$project_type" in
        python)
            cat >> .envrc << 'EOF'

# Choose environment: minimal (default) or full
# Set PYTHON_ENV=full for additional tools like mypy, pytest, ipython
# export PYTHON_ENV=full

if [[ "${PYTHON_ENV:-minimal}" == "full" ]]; then
  echo "Using Python full environment"
else
  echo "Using Python minimal environment (set PYTHON_ENV=full for more tools)"
fi

# Aliases for modern Python workflow
alias uv-add="uv add"
alias uv-run="uv run" 
alias lint="ruff check ."
alias format="ruff format ."
alias check="ruff check . && ruff format --check ."
EOF
            ;;
        nodejs)
            cat >> .envrc << 'EOF'

# Auto-setup Node.js environment
layout node
EOF
            ;;
        go)
            cat >> .envrc << 'EOF'

# Go-specific environment
export GOPATH="$PWD/.go"
PATH_add "$GOPATH/bin"
EOF
            ;;
    esac
}

_create_gitignore() {
    local project_type="$1"
    
    cat > .gitignore << EOF
# Environment
.env
.env.local
.env.*.local

# Nix
result
result-*

# OS
.DS_Store
Thumbs.db

# IDEs
.vscode/
.idea/
*.swp
*.swo
*~

# Logs
*.log
logs/

EOF

    case "$project_type" in
        python)
            cat >> .gitignore << 'EOF'
# Python
__pycache__/
*.pyc
*.pyo
*.pyd
.Python
.venv/
env/
venv/
ENV/
dist/
build/
*.egg-info/
.pytest_cache/
.coverage
htmlcov/
.tox/
.mypy_cache/
.ipynb_checkpoints/

# uv specific
.uv-cache/
uv.lock
EOF
            ;;
        go)
            cat >> .gitignore << 'EOF'
# Go
vendor/
*.exe
*.exe~
*.dll
*.so
*.dylib
.go/
EOF
            ;;
        nodejs)
            cat >> .gitignore << 'EOF'
# Node.js
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.npm
.yarn-integrity
dist/
build/
.next/
.nuxt/
EOF
            ;;
        rust)
            cat >> .gitignore << 'EOF'
# Rust
target/
Cargo.lock
**/*.rs.bk
EOF
            ;;
        data)
            cat >> .gitignore << 'EOF'
# Data files (add specific patterns as needed)
data/raw/
data/processed/
*.csv
*.xlsx
*.parquet
*.h5
*.hdf5

# Python
__pycache__/
*.pyc
.venv/
.ipynb_checkpoints/

# Jupyter
.jupyter/
EOF
            ;;
    esac
}

_setup_python_project() {
    local project_name="$1"
    
    mkdir -p src tests
    
    # Create modern Python project structure
    echo "# $project_name" > README.md
    echo "" >> README.md
    echo "A modern Python project using uv and ruff." >> README.md
    echo "" >> README.md
    echo "## Quick Start" >> README.md
    echo "" >> README.md
    echo "\`\`\`bash" >> README.md
    echo "# Install dependencies" >> README.md
    echo "uv sync" >> README.md
    echo "" >> README.md
    echo "# Run the application" >> README.md
    echo "uv run python src/main.py" >> README.md
    echo "" >> README.md
    echo "# Add new dependencies" >> README.md
    echo "uv add requests" >> README.md
    echo "uv add --dev pytest ruff mypy" >> README.md
    echo "" >> README.md
    echo "# Lint and format" >> README.md
    echo "ruff check ." >> README.md
    echo "ruff format ." >> README.md
    echo "\`\`\`" >> README.md
    
    # Create main.py
    cat > src/main.py << 'EOF'
"""Main application module."""


def main() -> None:
    """Main function."""
    print("Hello from modern Python with uv and ruff!")


if __name__ == "__main__":
    main()
EOF

    # Create test file
    cat > tests/test_main.py << 'EOF'
"""Tests for main module."""

import pytest
from src.main import main


def test_main():
    """Test main function runs without error."""
    # This is a placeholder test
    main()  # Should not raise an exception
    assert True
EOF

    # Create pyproject.toml for uv
    cat > pyproject.toml << EOF
[project]
name = "$project_name"
version = "0.1.0"
description = ""
readme = "README.md"
requires-python = ">=3.11"
dependencies = []

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings  
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = []

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
EOF

    echo "📦 Created modern Python project with:"
    echo "  - pyproject.toml (uv configuration)"
    echo "  - ruff configuration for linting and formatting"
    echo "  - mypy configuration for type checking"
    echo "  - pytest setup for testing"
    echo ""
    echo "🚀 Next steps:"
    echo "  uv sync                    # Install dependencies"
    echo "  uv add requests            # Add runtime dependency"  
    echo "  uv add --dev pytest       # Add dev dependency"
    echo "  uv run python src/main.py  # Run the application"
}

_setup_go_project() {
    local project_name="$1"
    
    # Initialize go module in direnv to avoid the build issue
    echo "go mod init $project_name" >> .envrc
    
    mkdir -p cmd internal pkg
    echo "# $project_name" > README.md
    
    cat > cmd/main.go << EOF
package main

import "fmt"

func main() {
    fmt.Println("Hello from $project_name!")
}
EOF

    cat > internal/.gitkeep << 'EOF'
EOF

    cat > pkg/.gitkeep << 'EOF'
EOF
}

_setup_nodejs_project() {
    local project_name="$1"
    
    mkdir -p src
    echo "# $project_name" > README.md
    echo "console.log('Hello from $project_name!');" > src/index.js
    
    cat > package.json << EOF
{
  "name": "$project_name",
  "version": "1.0.0",
  "description": "",
  "main": "src/index.js",
  "scripts": {
    "start": "node src/index.js",
    "dev": "node --watch src/index.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC"
}
EOF
}

_setup_rust_project() {
    local project_name="$1"
    
    # Initialize cargo project in direnv to avoid conflicts
    echo "cargo init --name $project_name ." >> .envrc
}

_setup_data_project() {
    local project_name="$1"
    
    mkdir -p data/{raw,processed,external} notebooks scripts src
    echo "# $project_name - Data Analysis Project" > README.md
    
    cat > notebooks/01-explore.ipynb << 'EOF'
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Exploration\n",
    "\n",
    "Initial exploration of the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Load data\n",
    "# df = pd.read_csv('data/raw/sample.csv')\n",
    "print('Hello from data exploration!')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "name": "python",
   "version": "3.11.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
EOF

    echo "data/raw/" > data/.gitkeep
    echo "# Processed data files" > data/processed/.gitkeep
    echo "# External data sources" > data/external/.gitkeep
    
    cat > scripts/process_data.py << 'EOF'
#!/usr/bin/env python3
"""
Data processing script
"""

import pandas as pd

def main():
    print("Processing data...")
    # Add your data processing logic here
    
if __name__ == "__main__":
    main()
EOF

    chmod +x scripts/process_data.py
}

_setup_fullstack_project() {
    local project_name="$1"
    
    mkdir -p backend frontend shared
    echo "# $project_name - Full Stack Project" > README.md
    
    # Backend (Go)
    cd backend
    _create_flake_template "go" "$project_name-backend"
    _create_envrc_template "go"
    _setup_go_project "$project_name-backend"
    cd ..
    
    # Frontend (Node.js)
    cd frontend
    _create_flake_template "nodejs" "$project_name-frontend"
    _create_envrc_template "nodejs"
    _setup_nodejs_project "$project_name-frontend"
    cd ..
    
    # Root flake for unified development
    cat > flake.nix << EOF
{
  description = "$project_name - Full Stack";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    flake-utils.url = "github:numtide/flake-utils";
  };

  outputs = { self, nixpkgs, flake-utils }:
    flake-utils.lib.eachDefaultSystem (system:
      let
        pkgs = nixpkgs.legacyPackages.\${system};
      in
      {
        devShells = {
          default = pkgs.mkShell {
            buildInputs = with pkgs; [
              # Backend (Go)
              go
              # Frontend (Node.js)
              nodejs_20
              # Development tools
              git
              curl
              jq
              cachix
            ];

            shellHook = ''
              echo "🌐 Welcome to $project_name Full Stack!"
              echo ""
              echo "📂 Project structure:"
              echo "  backend/   - Go API server"
              echo "  frontend/  - Node.js frontend"
              echo "  shared/    - Shared utilities"
              echo ""
              echo "🏁 Quick start:"
              echo "  cd backend && direnv allow"
              echo "  cd frontend && direnv allow"
              echo ""
            '';
          };
        };
      });
}
EOF
}

main() {
    if [[ $# -eq 0 ]] || [[ "$1" == "help" ]] || [[ "$1" == "--help" ]] || [[ "$1" == "-h" ]]; then
        show_help
        exit 0
    fi
    
    if [[ $# -ne 2 ]]; then
        echo -e "${RED}❌ Invalid arguments${NC}"
        show_help
        exit 1
    fi
    
    local project_type="$1"
    local project_name="$2"
    
    # Validate project type
    case "$project_type" in
        python|go|nodejs|rust|data|fullstack)
            ;;
        *)
            echo -e "${RED}❌ Unknown project type: $project_type${NC}"
            show_help
            exit 1
            ;;
    esac
    
    # Check if directory already exists
    if [[ -d "$project_name" ]]; then
        echo -e "${RED}❌ Directory $project_name already exists${NC}"
        exit 1
    fi
    
    init_project "$project_type" "$project_name"
}

main "$@"