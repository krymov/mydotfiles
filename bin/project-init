#!/usr/bin/env bash
# Simple project initialization with fast development environments
# Creates directory, git repo, flake template, and fast .envrc

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

show_help() {
    echo "🚀 Project Environment Initializer"
    echo ""
    echo "Usage: project-init [TYPE] [NAME]"
    echo ""
    echo "Types:"
    echo "  python    - Python development environment"
    echo "  go        - Go development environment"
    echo "  nodejs    - Node.js development environment"
    echo "  rust      - Rust development environment"
    echo "  data      - Data science environment (Python-based)"
    echo ""
    echo "Examples:"
    echo "  project-init python my-ml-app"
    echo "  project-init go my-api-server"
    echo "  project-init nodejs my-web-app"
    echo ""
    echo "After initialization:"
    echo "  cd my-project"
    echo "  uv init              # For Python projects"
    echo "  go mod init          # For Go projects"
    echo "  npm init             # For Node.js projects"
    echo ""
}

create_fast_envrc() {
    local project_type="$1"
    
    case "$project_type" in
        python|data)
            cat > .envrc << 'EOF'
#!/usr/bin/env bash
# Fast Python environment using main dotfiles tools - NO NIX BUILDS!

echo "🐍 Loading fast Python environment (no builds!)"

# Check that required tools are available from main dotfiles
if ! command -v python >/dev/null 2>&1; then
    echo "❌ python not found - install in main dotfiles"
    exit 1
fi

if ! command -v uv >/dev/null 2>&1; then
    echo "❌ uv not found - install in main dotfiles"
    exit 1
fi

echo "✅ Python: $(python --version)"
echo "✅ uv: $(uv --version)"

# Check for optional tools
if command -v ruff >/dev/null 2>&1; then
    echo "✅ ruff: $(ruff --version)"
fi

echo ""
echo "📦 Lightning fast workflow:"
echo "  uv init                       # Initialize project"
echo "  uv add requests               # Add dependency"
echo "  uv run python src/main.py     # Run application"
echo "  ruff check . && ruff format . # Lint & format"
echo ""

# Set up project environment
export PROJECT_ROOT="$(pwd)"
export PYTHONPATH="$PROJECT_ROOT/src:$PYTHONPATH"
export UV_CACHE_DIR="$PROJECT_ROOT/.uv-cache"
EOF
            ;;
        go)
            cat > .envrc << 'EOF'
#!/usr/bin/env bash
# Fast Go environment using main dotfiles tools - NO NIX BUILDS!

echo "🐹 Loading fast Go environment (no builds!)"

# Check that required tools are available from main dotfiles
if ! command -v go >/dev/null 2>&1; then
    echo "❌ go not found - install in main dotfiles"
    exit 1
fi

echo "✅ Go: $(go version)"

# Check for optional tools
if command -v golangci-lint >/dev/null 2>&1; then
    echo "✅ golangci-lint: $(golangci-lint --version | head -1)"
fi

echo ""
echo "🚀 Lightning fast workflow:"
echo "  go mod init example.com/myproject  # Initialize module"
echo "  go mod tidy                        # Add dependencies"
echo "  go run .                           # Run application"
echo "  golangci-lint run                  # Lint code"
echo ""

# Set up project environment
export PROJECT_ROOT="$(pwd)"
export GOPATH="$PROJECT_ROOT/.go"
export GOCACHE="$PROJECT_ROOT/.go-cache"
EOF
            ;;
        nodejs)
            cat > .envrc << 'EOF'
#!/usr/bin/env bash
# Fast Node.js environment using main dotfiles tools - NO NIX BUILDS!

echo "🟢 Loading fast Node.js environment (no builds!)"

# Check that required tools are available from main dotfiles
if ! command -v node >/dev/null 2>&1; then
    echo "❌ node not found - install in main dotfiles"
    exit 1
fi

echo "✅ Node.js: $(node --version)"

# Check for package managers and tools
if command -v pnpm >/dev/null 2>&1; then
    echo "✅ pnpm: $(pnpm --version)"
elif command -v npm >/dev/null 2>&1; then
    echo "✅ npm: $(npm --version)"
fi

if command -v typescript >/dev/null 2>&1; then
    echo "✅ TypeScript: $(tsc --version)"
fi

echo ""
echo "⚡ Lightning fast workflow:"
echo "  npm init                     # Initialize package.json"
echo "  pnpm init                    # Or with pnpm"
echo "  pnpm add react               # Add dependencies"
echo "  pnpm run dev                 # Start dev server"
echo ""

# Set up project environment
export PROJECT_ROOT="$(pwd)"
export NODE_ENV=development

# Add local node_modules/.bin to PATH  
export PATH="$PROJECT_ROOT/node_modules/.bin:$PATH"
EOF
            ;;
        rust)
            cat > .envrc << 'EOF'
#!/usr/bin/env bash
# Fast Rust environment using main dotfiles tools - NO NIX BUILDS!

echo "🦀 Loading fast Rust environment (no builds!)"

# Check that required tools are available from main dotfiles
if ! command -v rustc >/dev/null 2>&1; then
    echo "❌ rustc not found - install in main dotfiles"
    exit 1
fi

if ! command -v cargo >/dev/null 2>&1; then
    echo "❌ cargo not found - install in main dotfiles"
    exit 1
fi

echo "✅ Rust: $(rustc --version)"
echo "✅ Cargo: $(cargo --version)"

echo ""
echo "🚀 Lightning fast workflow:"
echo "  cargo init                   # Initialize project"
echo "  cargo add serde              # Add dependency"
echo "  cargo run                    # Run application"
echo "  cargo test                   # Run tests"
echo ""

# Set up project environment
export PROJECT_ROOT="$(pwd)"
export CARGO_TARGET_DIR="$PROJECT_ROOT/.cargo-target"
EOF
            ;;
    esac
}

copy_flake_template() {
    local project_type="$1"
    local dotfiles_dir="$HOME/.dotfiles"
    
    if [[ -f "$dotfiles_dir/flakes/$project_type/flake.nix" ]]; then
        echo "📋 Copying flake template for $project_type"
        cp "$dotfiles_dir/flakes/$project_type/flake.nix" .
    else
        echo "⚠️  No flake template found for $project_type, creating minimal one"
        cat > flake.nix << EOF
{
  description = "Development environment for $project_type";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    flake-utils.url = "github:numtide/flake-utils";
  };

  outputs = { self, nixpkgs, flake-utils }:
    flake-utils.lib.eachDefaultSystem (system:
      let
        pkgs = nixpkgs.legacyPackages.\${system};
      in
      {
        devShells.default = pkgs.mkShell {
          buildInputs = [
            # Add project-specific dependencies here when needed
          ];
        };
      });
}
EOF
    fi
}

create_gitignore() {
    local project_type="$1"
    
    # Common ignores
    cat > .gitignore << 'EOF'
# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Direnv
.envrc.local

EOF

    # Type-specific ignores
    case "$project_type" in
        python|data)
            cat >> .gitignore << 'EOF'
# Python
__pycache__/
*.pyc
*.pyo
*.pyd
.Python
.venv/
env/
venv/
ENV/
dist/
build/
*.egg-info/
.pytest_cache/
.coverage
htmlcov/
.tox/
.mypy_cache/
.ipynb_checkpoints/

# uv specific
.uv-cache/
uv.lock
EOF
            ;;
        go)
            cat >> .gitignore << 'EOF'
# Go
vendor/
*.exe
*.exe~
*.dll
*.so
*.dylib
*.test
*.out
.go/
.go-cache/
EOF
            ;;
        nodejs)
            cat >> .gitignore << 'EOF'
# Node.js
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.npm
.eslintcache
.node_repl_history
*.tgz
.yarn-integrity
.env.local
.env.development.local
.env.test.local
.env.production.local
dist/
build/
EOF
            ;;
        rust)
            cat >> .gitignore << 'EOF'
# Rust
/target/
.cargo-target/
**/*.rs.bk
Cargo.lock
EOF
            ;;
    esac
}

init_project() {
    local project_type="$1"
    local project_name="$2"

    echo -e "${BLUE}🚀 Setting up $project_type environment: $project_name${NC}"

    # Create project directory
    mkdir -p "$project_name"
    cd "$project_name"

    # Initialize git
    git init
    echo "📁 Git repository initialized"

    # Create development environment files
    create_fast_envrc "$project_type"
    echo "⚡ Fast development environment configured"

    # Copy flake template
    copy_flake_template "$project_type"
    echo "❄️  Nix flake template ready (for when you need extra dependencies)"

    # Create .gitignore
    create_gitignore "$project_type"
    echo "📝 .gitignore created"

    # Enable direnv
    direnv allow
    echo "🔧 direnv enabled"

    echo -e "${GREEN}✅ Environment setup complete!${NC}"
    echo ""
    echo "📂 Created: $project_name/"
    echo "⚡ Fast environment: .envrc (no builds needed)"
    echo "❄️  Nix fallback: flake.nix (when you need extra deps)"
    echo ""
    echo -e "${YELLOW}Next steps:${NC}"
    echo "  cd $project_name"
    case "$project_type" in
        python|data)
            echo "  uv init                    # Initialize Python project"
            echo "  uv add requests            # Add dependencies"
            ;;
        go)
            echo "  go mod init example.com/myproject  # Initialize Go module"
            echo "  go mod tidy                # Manage dependencies"
            ;;
        nodejs)
            echo "  npm init                   # Initialize package.json"
            echo "  npm install react          # Add dependencies"
            ;;
        rust)
            echo "  cargo init                 # Initialize Rust project"
            echo "  cargo add serde            # Add dependencies"
            ;;
    esac
    echo ""
}

main() {
    local project_type="$1"
    local project_name="$2"

    # Validate project type
    case "$project_type" in
        python|go|nodejs|rust|data)
            ;;
        *)
            echo -e "${RED}❌ Unknown project type: $project_type${NC}"
            show_help
            exit 1
            ;;
    esac

    # Check if directory already exists
    if [[ -d "$project_name" ]]; then
        echo -e "${RED}❌ Directory $project_name already exists${NC}"
        exit 1
    fi

    init_project "$project_type" "$project_name"
}

# Handle arguments
if [[ $# -eq 0 ]] || [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
    show_help
    exit 0
fi

if [[ $# -ne 2 ]]; then
    echo -e "${RED}❌ Invalid arguments${NC}"
    show_help
    exit 1
fi

main "$1" "$2"
